多核处理器 --> 并发操作

在C++11之后，标准库提供了并发操作的支持，包括线程、原子操作、互斥量、条件变量等等

并发分类：
    软件并发指的是在一个时间段内，宏观上有多个程序同时运行，本质上是任务间高速切换，而微观上在某个时间点上只有一个程序在运行
    硬件并发指的是在一个时间段内，有多个程序同时运行在不同的处理器核心上

理想情况：硬件核心数 >= 待处理任务数，但实际情况常常是硬件并发与软件并发/任务切换同时存在

并发方式：
    多进程并发：多个进程同时运行，每个进程有自己的地址空间，之间互不影响，
               进程间通信需要借助操作系统提供的IPC机制，且硬件开销(启动、加载、释放)比较大
    多线程并发：多个线程同时运行，同一个进程之内的每个线程都共享进程的地址空间，线程间通信更加方便
               线程间的调度与切换开销较小，但需要开发者自己保证线程安全
    目前为止，多线程并发是大多数主流编程语言最常用的并发方式，因此本课程也是基于C++的多线程并发编程

并不是任何情况下都需要使用多线程开发，多线程开发的优势在于：
    1.提高程序的响应速度，增强用户体验
    2.提高程序的可扩展性，方便程序的后期维护
    3.提高程序的运行效率，充分利用多核处理器的优势

创建线程的方式：
    函数指针、函数对象/函数符/仿函数、lambda表达式、成员函数指针、类成员函数
    根本原因是由于 thread 类中有多种形式的构造函数，传递不同参数就可调用不同构造函数


thread_local：线程本地存储
move：线程移动操作，将一个线程移动到另外一个线程，则原线程会被销毁
joinable：判断线程是否可以能够汇合/被join，可以汇合返回true，无法汇合返回false
          执行过move操作的线程无法被join，执行过join/detach操作的线程无法再次join，默认构造的线程无法被join
RAII：是一种对资源申请、资源释放成对的操作的封装，https://zhuanlan.zhihu.com/p/34660259